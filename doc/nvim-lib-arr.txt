*nvim-lib-arr.txt* `arr` module of |nvim-lib|
>lua
    local arr = require("nvim-lib").arr
<

These functions are intended for arrays or sequences. The default iterator for
all of them is |ipairs|, but with many of them you can provide an optional
iterator. For example, |arr.npairs| if you don't want the iteration to stop at
`nil` values.

Where the function accepts a {fn} parameter, this can be a string.
See |nvim-lib-fn-as-string|.



MODULE FUNCTIONS
==============================================================================

*arr.npairs* ({t})

  Iterator for all elements of an array, not only those returned by ipairs
  (because it stops at the first nil value).
  The iterator only returns non-nil values.

  Note: this slower than either |pairs| or |ipairs| because it loops over all
  potential indices of an array. It is meant for specific use cases, and not
  where the array is certain to be a sequence, |ipairs| in this case is much
  preferable.

  Parameters:~
    • {t} (table)

  Return:~
    (function)

  See also:~
      https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*arr.range* ({base}, {max}, {stride})

  Lua version of |range()|.

  Differences:
  • default range starts at 1
  • if {base} > {max}, {stride} defaults at `-1` instead of `1`
>
    arr.range(3)        => { 1, 2, 3 }
    arr.range(0, 2)     => { 0, 1, 2 }
    arr.range(1, 3)     => { 1, 2, 3 }
    arr.range(3, 1)     => { 3, 2, 1 }
    arr.range(3, 1, 1)  => {}
<

------------------------------------------------------------------------------

*arr.map* ({t}, {fn}, {new}, {iter})
                                                       |nvim-lib-fn-as-string|
  Map an array in place (or to new table) with {fn}.
  {fn} is called with (key, value) as arguments.

  Note: this function can create holes in an array.

  Parameters:~
    • {fn}   (function,string)
    • {t}    (table)
    • {new}  (bool)
    • {iter} (function)

  Return:~
      (table)

------------------------------------------------------------------------------

*arr.filter* ({t}, {fn}, {iter})
                                                       |nvim-lib-fn-as-string|
  Filter an array with {fn}.
  Never filters in place, produces a new sequence.
  {fn} is called with (key, value) as arguments.

  Note: this is the closest to the |vim.tbl_filter| behaviour.

  Parameters: ~
    • {fn}   (function,string)
    • {t}    (table)
    • {iter} (function)

  Return: ~
    (table)

------------------------------------------------------------------------------

*arr.seq* ({t}, {iter})

  Create a new sequence from an array, by removing holes.

  Parameters:~
    • {t}    (table)
    • {iter} (function)

  Return:~
    (table)

------------------------------------------------------------------------------

*arr.isseq* ({t})

  Test if a table is a sequence (pure array without holes).
  Returns false if there are non-numeric keys.

  Parameters:~
    • {t} (table)

  Return:~
    (boolean)

------------------------------------------------------------------------------

*arr.isarr* ({t})

  Test if a table is a pure array.
  Returns false if there are non-numeric keys.

  Parameters:~
    • {t} (table)

  Return:~
    (table)

------------------------------------------------------------------------------

*arr.indexof* ({t}, {v}, {iter})

  If an array contains a value, return its index.
  Return nil if the array doesn't contain the value.

  Parameters:~
    • {t}    (table)
    • {v}    (any)
    • {iter} (function)

  Return:~
    (any) the value of the last nested key

  See also: ~
    |vim.arr_get()|

------------------------------------------------------------------------------

*arr.uniq* ({t}, {iter})

  Returns a copy of an array with all duplicate elements removed.

  Parameters:~
    • {t}    (table)
    • {iter} (function)

  Return:~
    (number)

  See also:~
    https://github.com/Tieske/Penlight/blob/master/lua/pl/tablex.lua

------------------------------------------------------------------------------

*arr.slice* ({t}, {start}, {finish})

  Creates a copy of an array containing only elements from {start} to
  {finish}.

  Parameters:~
    • {t}      (table)
    • {start}  (number)   Start range of slice
    • {finish} (number)   End range of slice (inclusive)

  Return:~
    (table)

------------------------------------------------------------------------------

*arr.reverse* ({t}, {new})

  Reverse an array, in place or to a new array.

  Parameters:~
    • {t}    (table)
    • {new}  (boolean)

  Return:~
    (table)

------------------------------------------------------------------------------

*arr.extend* ({dst}, {src}, {at}, {start}, {finish})

  Adds the values from one array to another array.

  Parameters:~
    • {dst}    (table)       Array to be extended
    • {src}    (table)       Array to extend with
    • {at}     (number,nil)  Insertion point in {dst}, or at end
    • {start}  (number,nil)  Start extending at this index of {src}
    • {finish} (number,nil)  Stop extending at this index of {src}

  Return:~
    (table)

  See also:~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*arr.flatten* ({t})

  Flattens a hierarchy of arrays into a single array containing all of the
  values.

  Parameters:~
    • {t} (table)

  Return:~
    (table)

  See also:~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*arr.intersect* ({a}, {b}, {iter})

  Set containing those elements that are in both arrays {a} and {b}.

  Parameters:~
    • {a}    (table)
    • {b}    (table)
    • {iter} (function)

  Return:~
    (table)

  See also:~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*arr.subtract* ({a}, {b}, {iter})

  Set containing those elements that are in array {a} but not in table {b}.

  Parameters:~
    • {a}    (table)
    • {b}    (table)
    • {iter} (function)

  Return:~
    (boolean)


==============================================================================
vim:tw=78:ts=2:sw=2:ft=help:norl:et:fen:fdl=0:
