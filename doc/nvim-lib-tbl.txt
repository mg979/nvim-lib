*nvim-lib-tbl.txt* `tbl` module of |nvim-lib|
>lua
    local tbl = require("nvim-lib").tbl
<

MODULE FUNCTIONS
==============================================================================

*tbl.spairs* ({t}, {comp})

  Iterator that enumerates a table sorted by its keys.
  If {comp} is given, it must be a function to be used by |table.sort|.

  Parameters: ~
    • {t} table
    • {comp} function,nil

  Returns: ~
    (function)

  See also: ~
      https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*tbl.map* ({t}, {fn}, {new}, {iter})
                                                       |nvim-lib-fn-as-string|
  Map a table in place (or to new table) with {fn}.
  The function is called with (key, value) as arguments.
  The default iterator is |pairs|, but it can be overridden with the `iter`
  argument. Other useful iterators: |ipairs|, `arr.npairs`.
  Note: this function can create holes in an array.

  Parameters: ~
    • {t} table
    • {fn} function,string
    • {new} boolean,nil
    • {iter} function,nil

  Returns: ~
      (table)

------------------------------------------------------------------------------

*tbl.filter* ({t}, {fn}, {new}, {iter})
                                                       |nvim-lib-fn-as-string|
  Filter a table in place (or to new table) with {fn}.
  The function is called with (key, value) as arguments.
  The default iterator is |pairs|, but it can be overridden with the `iter`
  argument. Other useful iterators: |ipairs|, `arr.npairs`.
  Note: this function can create holes in an array.

  Parameters: ~
    • {t} table
    • {fn} function,string
    • {new} boolean,nil
    • {iter} function,nil

  Returns: ~
      (table)

------------------------------------------------------------------------------

*tbl.toarray* ({t})

  Create a new array from the values of {t}.

  Parameters: ~
    • {t} table

  Returns: ~
    (table)

------------------------------------------------------------------------------

*tbl.merge* (...)

  Merge two or more tables. Two tables are needed as a minimum, the last
  argument can optionally define the behaviour of the merge. By default, same
  keys are overwritten during the merge: if the last argument is `true`, the
  original value is not overwritten. If the last argument is the string
  `"error"`, an error is thrown when trying to overwrite an existing key.

  NOTE: this mutates the first table! Use |tbl.mergenew| to avoid it.

  Parameters: ~
    • {...}     (table) tables to merge
                (boolean|string) merge behaviour

  Returns: ~
    (table) merged table (the first passed table)

  Example: ~
>
      tbl.merge(a, b, c, d, "error")
<
------------------------------------------------------------------------------

*tbl.mergenew* (...)

  Same as |tbl.merge|, but it creates a new table, so that the original tables
  are preserved.

  Example: ~
>
      local new_t = tbl.mergenew(a, b, c, d, "error")
<
------------------------------------------------------------------------------

*tbl.deepmerge* (...)

  Merge recursively two or more tables, performing a deepcopy of each before
  merging. Original tables are preserved, a new merged table is created and
  returned. The final argument can be `true`, `false` or 'error', as for
  |tbl.merge|.

  Parameters: ~
    • {...}     (table) tables to merge
                (boolean|string) merge behaviour

  Returns: ~
    (table) merged table (new table)

------------------------------------------------------------------------------

*tbl.empty* ({t})

  Test if table {t} is empty.

  Parameters: ~
    • {t} table

  Returns: ~
    (boolean)

------------------------------------------------------------------------------

*tbl.contains* ({t}, {value})

  Returns `true` if the table {t} contains the specified value.

  Parameters: ~
    • {t} table
    • {value} any

  Returns: ~
    (boolean)

------------------------------------------------------------------------------

*tbl.copy* ({t}, {meta}, {iter})

  Make a shallow copy of a table. Copies metatable if {meta} is true.

  Parameters: ~
    • {t} table
    • {meta} boolean,nil
    • {iter} function,nil

  Returns: ~
    (table)

------------------------------------------------------------------------------

*tbl.get* ({t}, {...})

  Get the value of a nested key inside a table.
  Multiple nested keys can be passed as argument, they must all be found one
  inside the other, until the last is reached, then its value is returned.

  Parameters: ~
    • {t} table: table to traverse
    • {...} strings: names of nested keys to look for in the table

  Returns: ~
    (any) the value of the last nested key

  See also: ~
    |vim.tbl_get()|

------------------------------------------------------------------------------

*tbl.count* ({t})

  Counts the number of non-nil values in table {t}.

  Parameters: ~
    • {t} table

  Returns: ~
    (number)

  See also: ~
    https://github.com/Tieske/Penlight/blob/master/lua/pl/tablex.lua

------------------------------------------------------------------------------

*tbl.replace* ({t}, {val}, {rep}, {iter})

  Replace all instances of {value} with {replacement} in an table.
  Default iterator is |pairs|, but another can be passed in the {iter}
  parameter.

  Parameters: ~
    • {value}
    • {replacement}
    • {iter} function,nil

------------------------------------------------------------------------------

*tbl.keys* ({t})

  Return an array with all keys used in table {t}.

  Parameters: ~
    • {t} table

  Returns: ~
    (table)

  See also: ~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*tbl.values* ({t})

  Return an array with all values used in table {t}.

  Parameters: ~
    • {t} table

  Returns: ~
    (table)

  See also: ~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*tbl.deepcopy* ({t})

  Make a complete copy of a table, including any child tables it contains.

  Parameters: ~
    • {t} table

  Returns: ~
    (table)

  See also: ~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*tbl.equal* ({a}, {b}, {deep})

  Compares two tables. If {deep} is false, it doesn't check the content of
  nested tables, it will only check for object identity (shallow comparison).

  Parameters: ~
    • {a} table
    • {b} table
    • {deep} boolean

  Returns: ~
    (boolean)

------------------------------------------------------------------------------

*tbl.intersect* ({a}, {b}, {iter})

  Set containing those elements that are in both tables A and B.
  Default iterator is |pairs|, but another can be passed in the {iter}
  parameter.

  Parameters: ~
    • {a} table
    • {b} table
    • {iter} function,nil

  Returns: ~
    (table)

  See also: ~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua

------------------------------------------------------------------------------

*tbl.subtract* ({a}, {b}, {iter})

  Set containing those elements that are in table A but not in table B.
  Default iterator is |pairs|, but another can be passed in the {iter}
  parameter.

  Parameters: ~
    • {a} table
    • {b} table
    • {iter} function,nil

  Returns: ~
    (table)

  See also: ~
    https://github.com/premake/premake-core/blob/master/src/base/table.lua


==============================================================================
vim:tw=78:ts=2:sw=2:ft=help:norl:et:fen:fdl=0:
