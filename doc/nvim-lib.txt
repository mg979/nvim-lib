*nvim-lib.txt* An user-friendly lua API for Neovim

NVIM-LIB - TABLE OF CONTENTS                                        *nvim-lib*
==============================================================================

  Introduction.......................................|nvim-lib-introduction|
  Module: api........................................|nvim-lib-api|
  Module: nvim.......................................|nvim-lib-nvim|
    Registers table..................................|nvim-lib-registers|
    Keycodes table...................................|nvim-lib-keycodes|
  Module: tbl........................................|nvim-lib-tbl|
  Module: arr........................................|nvim-lib-tbl|
    Notes about |vim-tbl_|*............................|nvim-lib-vimtbl|



INTRODUCTION                                     *nvim-lib-introduction*
==============================================================================

  Neovim API is more powerful than Vim API. But this comes at the price of:

  - redundance: there are lots of ways to do similar (or even the same) thing,
    and many of the new ways aren't better than the old ones. Sometimes new
    functions appear, that try to remedy deficiencies of older functions, and
    this can happen repeatedly (|nvim_command|, |nvim_exec|, |nvim_cmd|...).
    This is somewhat expected since it's not even reached version 1, but
    currently it's a problem.

  - user unfriendliness: vim API mostly supports optional parameters. Neovim
    API doesn't, for its own reasons. I'm not arguing with the thought that
    the C API must be strict. But Lua API could be different...
    Instead it is not. You can't call |vim.api| functions without providing
    all optional arguments (even if they're just placeholders, 'reserved for
    future use'). And even lua-only functions like |vim.split()| aren't more
    merciful.


MODULE - API                                                    *nvim-lib-api*
==============================================================================

  Must be |require|d with:
>lua
    local api = require("nvim-lib").api
<
  Then you can call functions like this:
>lua
    api.win_close(...) -- instead of vim.api.nvim_win_close(...)
<
  There are no other differences, nor any performance impact. Names are still
  perfectly searchable with `K` key (unless it is replaced by `lsp`, for
  example).

  Extra arguments for these functions are NOT optional.



MODULE - NVIM                                                  *nvim-lib-nvim*
==============================================================================
                                                           |nvim-lib-nvim.txt|
  |require| with:
>lua
    local nvim = require("nvim-lib").nvim
<
  Extra arguments for these functions are generally optional.

    function        arguments~
    ---------------------------------------------------------~
    `put`             lines, o
    `setlines`        buf, lines, start, finish
    `scratchbuf`      lines, opts
    `commands`        cmds
    `augroup`         name
    `echo`            o, o2
    `echoerr`         text
    `yesno`           question
    `popup`           o
    `bufsize`         buf
    `eval`            expr, throw
    `try`             o
    `search`          pat, flags, stopline, timeout, skip
    `testspeed`       cmd, cnt, title

  Function documentation is found at |nvim-lib-nvim.txt|.



REGISTERS TABLE                                           *nvim-lib-registers*
------------------------------------------------------------------------------

nvim.reg[{register}]

  Table that can be accessed by register:
>lua
    R = nvim.reg['"']           -- read register
    r, t, w = nvim.reg('"')     -- read register, type, width if block type
    nvim.reg['"'] = text        -- set register to some text
    nvim.reg('"', text, "b")    -- set register to text, and set register type
<
  `nvim.reg` also understands the following expressions:
        key                same as~
      nvim.reg.unnamed   |getreg|('"')
      nvim.reg.delete    |getreg|('-')
      nvim.reg.colon     |getreg|(':')
      nvim.reg.dot       |getreg|('.')
      nvim.reg.star      |getreg|('*')
      nvim.reg.plus      |getreg|('+')
      nvim.reg.file      |getreg|('%')
      nvim.reg.alt       |getreg|('#')
      nvim.reg.eval      |getreg|('=')
      nvim.reg.expr      |getreg|('=', 1)

  When setting a register, the following rules are applied:

     • {string}   type is "c", or "l" if it terminates with "\n"
     • {table}    type is "l"

  You must use the function form to set the type as block. Also remember that
  some registers are read-only.

  See also: ~
    |getreg()|, |getregtype()|, |setreg()|, |getreginfo()|



KEYCODES TABLE                                             *nvim-lib-keycodes*
------------------------------------------------------------------------------

nvim.keycodes[{keycode}]

  Lua doesn't handle naturally keycodes like <CR>, <BS> in the same way that
  vimscript does. To make them work in Lua, they must be translated in
  terminal codes first with |nvim_replace_termcodes()|.

  With this table you get the translated keycodes, you can use either the
  keycode notation (<key>) or a "stringified" notation:
>lua
    local k = nvim.keycodes
    local CR, Tab = k.CR, k.Tab -- also: k['<CR>'], k['<Tab>']
    local co, mj = k.CtrlO, k.Metaj -- MetaJ and Metaj are different!
    local cp, mK = k['<C-p>'], k['<M-K>'] -- case can matter
<
  Note: case doesn't matter for keycodes like <CR> or <C-O>, but it matters
  for the <M-?> keycodes, since <M-a> and <M-A> are different keys.



MODULE - TBL                                                    *nvim-lib-tbl*
==============================================================================

  |require| with:
>lua
    local tbl = require("nvim-lib").tbl
    local arr = require("nvim-lib").arr
<
  In Lua, handling tables is slightly complicated by the fact that a table can
  be at the same time associative (keys are string) and array-like (with
  numerical indices), so they can behave like both.

  Note: when describing the module, I'll only talk about:

  • `table`     can be anything
  • `array`     part of a table with numerical indices, can contain holes
  • `sequence`  part of a table that can be iterated with |ipairs|

  Of special note, there are two new (non-global) iterators available:

    • |npairs| is similar to |ipairs|, but doesn't stop at `nil` keys, so it
             can be used to loop over arrays that are not sequences
    • |spairs| generates a sorted order of iteration, accepts a `compare`
             function.

  There are two submodules that handle tables:

    • `tbl`     handles all kinds of tables               |nvim-lib-tbl.txt|
    • `arr`     specializes in arrays and sequences       |nvim-lib-arr.txt|

  They all take a table as first argument, so they can be used as methods with
  the `:` notation.

  Differently from |vim.tbl_|* functions, they can change the table in-place,
  and {fn} is called with `(key, value)`, not only with `(value)`.
  Also, they never do table validation. You're responsible for that.

  Some functions have an `iter` parameter, meaning they accept an iterator
  function, default is |pairs| (such as |ipairs|, |npairs|, |spairs|).

    function    arguments       notes~
    ---------------------------------------------------------~
    `spairs`       t, comp              iterator that returns sorted pairs
    `map`          t, fn, new, iter     map {t} with {fn}
    `filter`       t, fn, new, iter     filter {t} with {fn}
    `toarray`      t                    create an array from a table
    `merge`        t1, t2, keep         merge tables
    `empty`        t                    check if table is empty
    `contains`     t, val               check if table contains value
    `copy`         t, meta, iter        shallow copy, can also copies metatable
    `deepcopy`     t                    deep copy, also copies metatables
    `get`          t, ...               get nested values from inside a table
    `count`        t                    number of non-nil values in table
    `replace`      t, val, rep, iter    replace {val} with {rep}
    `keys`         t                    create array with table keys
    `values`       t                    create array with table values
    `equal`        a, b, deep           check for table equality, also deep
    `intersect`    a, b, iter           common `k/v pairs` between two tables
    `difference`   a, b, iter           only `k/v pairs` that belong to one table

  Notes:

    `get`         cf. |vim.tbl_get|
    `empty`       cf. |vim.tbl_isempty|
    `is_array`    cf. |vim.tbl_islist|
    `keys`        cf. |vim.tbl_keys|
    `values`      cf. |vim.tbl_values|

  Full documentation is at |nvim-lib-tbl.txt|.



MODULE - ARR                                                    *nvim-lib-arr*
==============================================================================

  |require| with:
>lua
    local arr = require("nvim-lib").arr
<
  Functions that are more specialized in handling arrays and sequences.

    function        arguments         notes~
    ---------------------------------------------------------~
    `npairs`          t                 iterator that doesn't skip nil values
    `range`           n, m, step        cf. |range()|
    `maparr`          t, fn, new        map an array with {fn}
    `mapseq`          t, fn             map an array to a new sequence
    `filterarr`       t, fn, new        filter an array with {fn}
    `filterseq`       t, fn             filter an array to a new sequence {1}
    `seq`             t                 new sequence from array, removing holes
    `isseq`           t                 false if there are holes in the array
    `isarr`           t                 false if there are non-numerical indices
    `indexof`         t, v              finds index of value in the array
    `uniq`            t                 new array with removed duplicates
    `slice`           t, s, f           new array that is a slice of the first
    `extend`          a, b, at, s, f    append/insert an array in another
    `flatten`         t                 nested arrays in a linear array
    `intersectarr`    a, b              common `values` between a and b
    `subtractarr`     a, b              only `values` that belong to a and not b

  {1} this is the closest to |vim.tbl_filter| behaviour.

  Full documentation is at |nvim-lib-arr.txt|.




NOTES ABOUT VIM.TBL_ FUNCTIONS                               *nvim-lib-vimtbl*
------------------------------------------------------------------------------

  Can be found at (|gf| over path): `$VIMRUNTIME/lua/vim/shared.lua`

  I think the |vim.tbl_|* stuff is horrible and should be avoided.
  Many of those functions do some sort of table validation: maybe it's needed
  for |vim.lsp| but I doubt anybody else needs it this bad.
  In some cases at least, this same validation makes also obligatory
  parameters that could be optional.
  Some functions are intended to work only with arrays, and it's not always
  documented. An example below.

  |vim.tbl_filter()| behaves differently from what one could understand
  from reading the documentation:
  - it creates a new table
  - it assumes {table} is an array
  - it will actually FLATTEN an associative table to an array with the
    filtered values (in the copy of course)!
  - while doing so, it uses `pairs`, so that information about keys is lost.

  So it's not really a filtering function, it's something entirely different.
  It has its uses: it just isn't what you'd expect it to be. And what it
  actually is, isn't documented. In Lua tables are very flexible and it's easy
  to mess things up simply by using the wrong iterator function for your
  use-case.

  |vim.tbl_isempty()| just checks `next(t) == nil`, as it should, but it does
  table validation. Totally useless. Spare yourself a table lookup, a function
  call, an underscore AND a damn table validation, and type also less
  characters (13 vs. 17, both bring bad luck unfortunately).

  In these modules you find variants of all those functions that don't do any
  table validation, and are a bit faster when possible.
  Of course you can check them and if you find mistake please file an issue.



CREDITS AND LICENSE
==============================================================================

Bram Moolenar for Vim
Neovim developers

MIT license

==============================================================================
vim:tw=78:ts=2:sw=2:ft=help:norl:et:fen:fdl=0:
