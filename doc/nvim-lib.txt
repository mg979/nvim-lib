*nvim-lib.txt* An user-friendly lua API for Neovim

NVIM-LIB - TABLE OF CONTENTS                                        *nvim-lib*
==============================================================================

  Introduction.......................................|nvim-lib-introduction|
  Module: api........................................|nvim-lib-api|
  Module: nvim.......................................|nvim-lib-nvim|
    Registers table..................................|nvim-lib-registers|
    Keycodes table...................................|nvim-lib-keycodes|
  Module: tbl........................................|nvim-lib-tbl|
  Module: arr........................................|nvim-lib-tbl|
    Table functions as strings.......................|nvim-lib-fn-as-string|
    Notes about |vim-tbl_|*............................|nvim-lib-vimtbl|



INTRODUCTION                                           *nvim-lib-introduction*
==============================================================================

  Neovim API is more powerful than Vim API. But this comes at the price of:

  - redundance: there are lots of ways to do similar (or even the same) thing,
    and many of the new ways aren't better than the old ones. Sometimes new
    functions appear, that try to remedy deficiencies of older functions, and
    this can happen repeatedly (|nvim_command|, |nvim_exec|, |nvim_cmd|...).
    This is somewhat expected since it's not even reached version 1, but
    currently it's a problem.

  - user unfriendliness: vim API mostly supports optional parameters. Neovim
    API doesn't, for its own reasons. I'm not arguing with the thought that
    the C API must be strict. But Lua API could be different...
    Instead it is not. You can't call |vim.api| functions without providing
    all optional arguments (even if they're just placeholders, 'reserved for
    future use'). And even lua-only functions like |vim.split()| aren't more
    merciful.



USAGE                                                         *nvim-lib-usage*
==============================================================================

  It's not recommended to load all modules at startup, that is in your
  vimrc, since loading them has a cost.

  The library is split in several components, to reduce this cost.

  If you need more modules in a script, you can do for convenience:
>lua
    local api, nvim, tbl, arr = require("nvim-lib")()
<
  You require individual modules with:
>lua
    local api = require("nvim-lib").api
    local nvim = require("nvim-lib").nvim
    local tbl = require("nvim-lib").tbl
    local arr = require("nvim-lib").arr
<
                                                                *nvim-lib-log*
  Some errors are not raised, they added to an internal log.
  To show the log: >
    require("nvim-lib.util").log()



MODULE - API                                                    *nvim-lib-api*
==============================================================================

  With this module you can call functions like this:
>lua
    api.win_close(...) -- instead of vim.api.nvim_win_close(...)
<
  There are no other differences, nor any performance impact. Names are still
  perfectly searchable with `K` key (unless it is replaced by `lsp`, for
  example).

  They are just links to the original functions, so extra arguments for these
  functions are NOT optional.



MODULE - NVIM                                                  *nvim-lib-nvim*
==============================================================================
                                                           |nvim-lib-nvim.txt|
  Extra arguments for these functions are generally optional.

    function        arguments~
    ---------------------------------------------------------~
    `put`             lines, o
    `setlines`        buf, lines, start, finish
    `scratchbuf`      lines, opts
    `commands`        cmds
    `mappings`        maps
    `augroup`         name
    `echo`            o, o2
    `echoerr`         text
    `yesno`           question
    `popup`           o
    `bufsize`         buf
    `try`             o
    `search`          pat, flags, stopline, timeout, skip
    `testspeed`       cmd, cnt, title

  Function documentation is found at |nvim-lib-nvim.txt|.

  This module also includes some tables for better accessibility of several
  functionalities. |nvim-lib-tables|



MODULE - TBL                                                    *nvim-lib-tbl*
==============================================================================

  |require| with:
>lua
    local tbl = require("nvim-lib").tbl
    local arr = require("nvim-lib").arr
<
  In Lua, handling tables is slightly complicated by the fact that a table can
  be at the same time associative (keys are string) and array-like (with
  numerical indices), so they can behave like both.

  Note: when describing the module, I'll only talk about:

  • `table`     can be anything
  • `array`     part of a table with numerical indices, can contain holes
  • `sequence`  part of a table that can be iterated with |ipairs|

  Of special note, there are two new (non-global) iterators available:

    • |npairs| is similar to |ipairs|, but doesn't stop at `nil` keys, so it
             can be used to loop over arrays that are not sequences
    • |spairs| generates a sorted order of iteration, accepts a `compare`
             function.

  There are two submodules that handle tables:

    • `tbl`     handles all kinds of tables               |nvim-lib-tbl.txt|
    • `arr`     specializes in arrays and sequences       |nvim-lib-arr.txt|

  They all take a table as first argument, so they can be used as methods with
  the `:` notation.

  Differently from |vim.tbl_|* functions, they can change the table in-place,
  and {fn} is called with `(key, value)`, not only with `(value)`.
  Also, they never do table validation. You're responsible for that.

  Some functions have an `iter` parameter, meaning they accept an iterator
  function, default is |pairs| (such as |ipairs|, |npairs|, |spairs|).

    function    arguments       notes~
    ---------------------------------------------------------~
    `spairs`       t, comp              iterator that returns sorted pairs
    `map`          t, fn, new, iter     map {t} with {fn}
    `filter`       t, fn, new, iter     filter {t} with {fn}
    `toarray`      t                    create an array from a table
    `merge`        t1, t2, keep         merge tables
    `empty`        t                    check if table is empty
    `contains`     t, val               check if table contains value
    `copy`         t, meta, iter        shallow copy, can also copies metatable
    `deepcopy`     t                    deep copy, also copies metatables
    `get`          t, ...               get nested values from inside a table
    `count`        t                    number of non-nil values in table
    `replace`      t, val, rep, iter    replace {val} with {rep}
    `keys`         t                    create array with table keys
    `values`       t                    create array with table values
    `equal`        a, b, deep           check for table equality, also deep
    `intersect`    a, b, iter           common `k/v pairs` between two tables
    `difference`   a, b, iter           only `k/v pairs` that belong to one table

  Notes:

    `get`         cf. |vim.tbl_get|
    `empty`       cf. |vim.tbl_isempty|
    `is_array`    cf. |vim.tbl_islist|
    `keys`        cf. |vim.tbl_keys|
    `values`      cf. |vim.tbl_values|

  Full documentation is at |nvim-lib-tbl.txt|.



MODULE - ARR                                                    *nvim-lib-arr*
==============================================================================

  |require| with:
>lua
    local arr = require("nvim-lib").arr
<
  Functions that are more specialized in handling arrays and sequences.

    function        arguments         notes~
    ---------------------------------------------------------~
    `npairs`          t                 iterator that doesn't skip nil values
    `range`           n, m, step        cf. |range()|
    `maparr`          t, fn, new        map an array with {fn}
    `mapseq`          t, fn             map an array to a new sequence
    `filterarr`       t, fn, new        filter an array with {fn}
    `filterseq`       t, fn             filter an array to a new sequence {1}
    `seq`             t                 new sequence from array, removing holes
    `isseq`           t                 false if there are holes in the array
    `isarr`           t                 false if there are non-numerical indices
    `indexof`         t, v              finds index of value in the array
    `uniq`            t                 new array with removed duplicates
    `slice`           t, s, f           new array that is a slice of the first
    `extend`          a, b, at, s, f    append/insert an array in another
    `flatten`         t                 nested arrays in a linear array
    `intersectarr`    a, b              common `values` between a and b
    `subtractarr`     a, b              only `values` that belong to a and not b

  {1} this is the closest to |vim.tbl_filter| behaviour.

  Full documentation is at |nvim-lib-arr.txt|.




TABLE FUNCTIONS AS STRING                              *nvim-lib-fn-as-string*
------------------------------------------------------------------------------

  Vimscript has a special way to write map/filter functions: with strings as
  an alternative to functions. Most functions that map/filter tables accept
  a similar syntax, but instead of |v:key| and |v:val|, here `_K` and `_V`
  must be used. Example:
>lua
    -- this increases all values in the array by 1
    local t = tbl.map({1, 2, 3}, "_V + 1")
<
  Note: there are differences with the vimscript implementation:

  - in vimL, these expression can retrieve anything that is valid in the
    current scope: local and global variables, script variables from outer
    scopes, etc.

  - this implementation uses |debug.getlocal()| and |debug.getupvalue()| to
    get names valid in the local scope, and in outer scopes respectively.
    With local names there shouldn't be problems, while with upvalues there
    could be, because not everything that is defined in outer scopes is
    returned by |debug.getupvalue()| (at least in LuaJIT, can't say for Lua),
    but only the names that have been accessed up to that moment.
    Global names should be visible anyway. This rules out:

    • outer local functions that have never been called
    • outer variables (including tables) that have never been accessed

    Therefore you may need to keep both the calling function and the called
    function (inside the evaluated string) in the same table, so that you can
    be sure that the called function will be visible.

  - also, you shouldn't return directly a function that uses this syntax,
    because if it is in the return value, the stack will be different from the
    one that you would have if the mapping function was called inside the
    function scope (and that is the position in the stack that will be
    used). At least this is my interpretation. Example:
>lua
      -- NO
      return tbl.map(t, "_V + 1")
      -- YES
      t = tbl.map(t, "_V + 1")
      return t
<




NOTES ABOUT VIM.TBL_ FUNCTIONS                               *nvim-lib-vimtbl*
------------------------------------------------------------------------------

  Can be found at (|gf| over path): `$VIMRUNTIME/lua/vim/shared.lua`

  WARNING: polemic tones ahead!

  Forgive me for my impudence, but I think the |vim.tbl_|* stuff is bad.
  Many of those functions do some sort of table validation: maybe it's needed
  for |vim.lsp| but I doubt anybody else needs it this bad.
  In some cases at least, this validation makes also mandatory parameters that
  could be optional, eg. |vim.split()|, |vim.tbl_extend()|.
  Some functions are intended to work only with arrays, and it's not always
  documented. An example below.

  |vim.tbl_filter()| behaves differently from what one could understand
  from reading the documentation:
  - it creates a new table
  - it assumes {table} is an array
  - it will actually CHANGE an associative table to an array with the
    filtered values (in the copy of course), so that information about keys is
    lost!

  So it's not really a filtering function, it's something entirely different.
  It has its uses: it just isn't what you'd expect it to be. And what it
  actually is, isn't documented. And if you don't know what it is, it could
  screw up your tables with you wondering why it's happening.

  |vim.tbl_isempty()| just checks `next(t) == nil`, as it should, but it does
  table validation. Totally useless. Spare yourself a table lookup, a function
  call, an underscore AND a damn table validation, and type also less
  characters (13 vs. 17, both bring bad luck unfortunately).
  To be honest, I included a |tbl.empty| function as well.

  In these modules you find variants of all those functions that don't do any
  table validation, and are a bit faster when possible.
  Of course you can check them and if you find mistake please file an issue.



CREDITS AND LICENSE
==============================================================================

Bram Moolenar for Vim
Neovim developers
Stack Overflow {1}

                               {1} https://stackoverflow.com/a/2835433/7787852

MIT license

==============================================================================
vim:tw=78:ts=2:sw=2:ft=help:norl:et:fen:fdl=0:
