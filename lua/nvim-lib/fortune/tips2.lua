-- From https://github.com/rubiin/fortune.nvim/blob/master/lua/fortune/tips.lua

return {
  { 'Use `:sort` followed by a range to sort lines in the specified range', },
  { 'Use `:sort u` followed by a range to remove duplicate lines in the specified range', },
  { 'Use `:g` followed by a pattern and a command to execute the command on lines that match the pattern', },
  { "Use `:g!` followed by a pattern and a command to execute the command on lines that don't match the pattern", },
  { 'Use `:g//m$` to move all lines matching a pattern to the end of the file', },
  { 'Use `:global` as an alias for `:g`', },
  { "Use `:vglobal` to execute a command on lines that don't match a pattern", },
  { 'Use `:normal` followed by a sequence of keys to execute normal mode commands', },
  { 'Use `:helpgrep` to search for help topics containing a specific keyword', },
  { 'Use `:set listchars` to configure the characters used to represent invisible characters', },
  { 'Use `:echo $VIMRUNTIME` to display the location of the Vim runtime directory', },
  { 'Use `:echo $VIM` to display the location of the Vim configuration directory', },
  { 'Use `:checkhealth` to diagnose common issues with your Neovim setup', },
  { 'Mapping caps-lock to escape is a common practice for vim users', },
  { 'Use "_ to yank into the black hole register', },
  { 'Use `:help g` to learn about the powerful uses of the g command', },
  { 'If text is wrapping use gk and gj to move up and down', },
  { 'Use CTRL-A and CTRL-X to increment and decrement numbers', },
  { 'You can use a vimscript function to replace text `%s/replace/\\=1+1`', },
  { 'q: opens the recent command history', },
  { 'Use `:sort` to sort lines in a buffer', },
  { 'Use `:grep` to search for patterns in multiple files', },
  { 'Use `:w !sudo tee %` to save a file that requires root permission', },
  { 'Use `:sort u` to remove duplicate lines in a buffer', },
  { 'Use `:g/pattern/d` to delete lines containing a specific pattern', },
  { 'Use `:%!xxd` to convert a file to hexadecimal', },
  { 'Use `:g/^/m0` to reverse the order of lines in a buffer', },
  { 'Use `:set list` to display whitespace characters in a buffer', },
  { 'Use `:set spell` to enable spell checking', },
  { 'Use `:set number` to display line numbers', },
  { 'Use `:tabnew` to open a new tab', },
  { 'Use `:tabnext` or `gt` to switch to the next tab', },
  { 'Use `:tabprevious` or `gT` to switch to the previous tab', },
  { 'Use `:tabclose` to close the current tab', },
  { 'Use `:vsp filename` to open a file in a vertical split', },
  { 'Use `:sp filename` to open a file in a horizontal split', },
  { 'Use `Ctrl-W h/j/k/l` to navigate between splits', },
  { 'Use `:resize +/-n` to adjust the height of the current split', },
  { 'Use `:vertical resize +/-n` to adjust the width of the current split', },
  { 'Use `:sview` to open a file in readonly mode', },
  { 'Use `:setlocal spell` to enable spell checking for the current buffer', },
  { 'Use `:make` to run the make command and display errors in the quickfix list', },
  { 'Use `:cnext` and `:cprev` to navigate through quickfix list items', },
  { 'Use `:cw` to open the quickfix list window', },
  { 'Use `:colder` and `:cnewer` to navigate through older and newer quickfix lists', },
  { 'Use `:marks` to list all the current marks', },
  { 'Use `:delmarks a b c` to delete marks a, b, and c', },
  { 'Use `:make!` to force make command execution', },
  { 'Use `:noautocmd w` to write a file without triggering autocmd events', },
  { 'Use `:checktime` to check if the file has been modified outside of Neovim', },
  { 'Use `:e!` to reload the current file from disk, discarding changes', },
  { 'Use `:registers` to display the contents of all registers', },
  { 'Use `"*y` to yank text into the system clipboard', },
  { 'Use `"*p` to paste from the system clipboard', },
  { 'Use `:TOhtml` to convert the current buffer to HTML', },
  { 'Use `:TOhtml` followed by a filename to save the HTML output to a file', },
  { 'Use `:registers` followed by a register name to display the contents of a specific register', },
  { 'Use `"+yy` to yank a line into the system clipboard', },
  { 'Use `"+p` to paste from the system clipboard', },
  { 'Use `:write` or `:w` to save changes to a file', },
  { 'Use `:edit` or `:e` to open a file for editing', },
  { 'Use `:q` to quit Neovim', },
  { 'Use `:q!` to forcefully quit Neovim without saving changes', },
  { 'Use `:wq` to save changes and quit', },
  { 'Use `:ls` to list all open buffers', },
  { 'Use `:bnext` or `:bn` to switch to the next buffer', },
  { 'Use `:bprevious` or `:bp` to switch to the previous buffer', },
  { 'Use `:bdelete` or `:bd` to delete a buffer', },
  { 'Use `:cd` followed by a directory path to change the current directory', },
  { 'Use `:pwd` to display the current working directory', },
  { 'Use `:r` followed by a filename to insert the contents of a file at the current cursor position', },
  { 'Use `:read` followed by a shell command to insert the output of a command at the current cursor position', },
  { 'Use `:source` followed by a file path to execute a Vimscript file', },
  { 'Use `:history` to display command-line history', },
  { 'Use `:ju` or `:jumps` to display a list of jump locations', },
  { 'Use `:changes` to display a list of recent changes', },
  { 'Use `:checkhealth` to diagnose common issues with your Neovim setup', },
  { 'Use `:scriptnames` to display a list of sourced scripts', },
  { 'Use `:set option?` to display the current value of an option', },
  { 'Use `:echo &option` to display the current value of an option', },
  { 'Use `:verbose set option?` to find out where an option was last set', },
  { 'Use `:redir @* | silent set option? | redir END` to copy the output of `:set option?` to the clipboard', },
  { 'Use `:redir @* | silent echo &option | redir END` to copy the value of an option to the clipboard', },
  { 'Use `:redir @* | silent verbose set option? | redir END` to copy the verbose output of `:set option?` to the clipboard', },
  { 'Use `:terminal` to open a terminal window', },
  { 'Use `:term` as an alias for `:terminal`', },
  { 'Use `Ctrl-W` followed by `N` to switch to normal mode in terminal mode', },
  { 'Use `Ctrl-W` followed by `C` to exit terminal mode', },
  { 'Use `:sp term://$SHELL` to open a terminal in a horizontal split', },
  { 'Use `:vsp term://$SHELL` to open a terminal in a vertical split', },
  { 'Use `:termedit` to open a terminal buffer with the contents of a file', },
  { 'Use `:termfind` to open a terminal buffer with the contents of a file and position the cursor at the first match of a pattern', },
  { 'Use `:grep` followed by a search pattern and file pattern to search for text in files', },
  { 'Use `:lgrep` to perform a search using the location list', },
  { 'Use `:vimgrep` to perform a search using the quickfix list', },
  { 'Use `:lvimgrep` to perform a search using the location list and the quickfix list', },
  { 'Use `:make` followed by a program name to compile a program', },
  { 'Use `:make` followed by a command to run a program', },
  { 'Use `:compiler` followed by a compiler name to set the compiler', },
  { 'Use `:lmake` to run make and populate the location list with errors', },
  { 'Use `:lopen` to open the location list window', },
  { 'Use `:lclose` to close the location list window', },
  { 'Use `:lfirst` to move to the first error in the location list', },
  { 'Use `:llast` to move to the last error in the location list', },
  { 'Use `:lnext` to move to the next error in the location list', },
  { 'Use `:lprevious` to move to the previous error in the location list', },
  { 'Use `:lopen` followed by a number to open the location list window and jump to the specified error', },
  { 'Use `:ldo` to execute a command on each error in the location list', },
  { 'Use `:cdo` to execute a command on each error in the quickfix list', },
  { 'Use `:Cfilter` to filter the quickfix list', },
  { 'Use `:cfdo` to execute a command on each error in the quickfix list', },
  { 'Use `:Cfilter!` to clear the quickfix list filter', },
  { 'Use `:sort` followed by a range to sort lines in the specified range', },
  { 'Use `:sort u` followed by a range to remove duplicate lines in the specified range', },
  { 'Use `:g` followed by a pattern and a command to execute the command on lines that match the pattern', },
  { "Use `:g!` followed by a pattern and a command to execute the command on lines that don't match the pattern", },
  { 'Use `:g//m$` to move all lines matching a pattern to the end of the file', },
  { 'Use `:global` as an alias for `:g`', },
  { "Use `:vglobal` to execute a command on lines that don't match a pattern", },
  { 'Use `:normal` followed by a sequence of keys to execute normal mode commands', },
  { 'Use `:helpgrep` to search for help topics containing a specific keyword', },
  { 'Use `:set listchars` to configure the characters used to represent invisible characters', },
  { 'Use `:echo $VIMRUNTIME` to display the location of the Vim runtime directory', },
  { 'Use `:echo $VIM` to display the location of the Vim configuration directory', },
  { 'Use `:checkhealth` to diagnose common issues with your Neovim setup', },
}
